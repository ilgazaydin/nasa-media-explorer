name: Deploy NASA Media Explorer to Cloud Run

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: nasa-media-explorer
  REGION: europe-west2
  REGISTRY: europe-west2-docker.pkg.dev
  SERVICE_ACCOUNT: nasa-media-explorer@nasa-media-explorer.iam.gserviceaccount.com

jobs:
  # Lint and Test Job
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage -- --run

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 7

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
        continue-on-error: true

  # Security Scan Job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Build and Deploy Job (only on main branch)
  deploy:
    name: Build & Deploy
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:${{ github.sha }} \
                     ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/frontend:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --port 8080 \
            --set-env-vars NODE_ENV=production,VITE_DEV_MODE=false \
            --timeout 300 \
            --service-account=${{ env.SERVICE_ACCOUNT }}

      - name: Test deployment
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          
          echo "Service deployed to: $SERVICE_URL"
          
          # Test main application
          if curl -f "$SERVICE_URL" --max-time 10 > /dev/null; then
            echo "‚úÖ Application is accessible"
          else
            echo "‚ùå Application is not accessible"
            exit 1
          fi

      - name: Post deployment comment
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              const serviceUrl = execSync('gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)"', 
                { encoding: 'utf-8' }).trim();
              
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: `üöÄ **Deployment Successful!**\n\nüåê **Live URL**: ${serviceUrl}\n\nüìä **Build Info**:\n- Commit: ${context.sha.slice(0, 7)}\n- Environment: Production\n- Region: ${{ env.REGION }}`
              });
            } catch (error) {
              console.log('Failed to post deployment comment:', error.message);
            }
